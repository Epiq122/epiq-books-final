package com.gleasondev.epiqbooksbackend.utils;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.security.Keys;import javax.crypto.SecretKey;import java.nio.charset.StandardCharsets;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Function;public class JwtUtil {    private static final String SECRET_KEY = "jrZc2Xjfjj";    public static String extractUserEmail(String token) {        return extractClaim(token, Claims::getSubject);    }    public static <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {        final Claims claims = extractAllClaims(token);        return claimsResolver.apply(claims);    }    private static Claims extractAllClaims(String token) {        return Jwts.parserBuilder().setSigningKey(getSecretKey()).build().parseClaimsJws(token).getBody();    }    private static SecretKey getSecretKey() {        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes(StandardCharsets.UTF_8));    }    public String createToken(String userEmail, String role) {        Map<String, Object> claims = new HashMap<>();        claims.put("userEmail", userEmail);        claims.put("role", role);        return Jwts.builder()                   .setClaims(claims)                   .setIssuedAt(new Date(System.currentTimeMillis()))                   .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 hours                   .signWith(getSecretKey(), SignatureAlgorithm.HS256)                   .compact();    }    public String extractRole(String token) {        return extractClaim(token, claims -> claims.get("role", String.class));    }    public boolean validateToken(String token) {        try {            Jwts.parserBuilder().setSigningKey(getSecretKey()).build().parseClaimsJws(token);            return true;        } catch (Exception e) {            return false;        }    }}