package com.gleasondev.epiqbooksbackend.config;//package com.gleasondev.epiqbooksbackend.config;////import com.gleasondev.epiqbooksbackend.security.JwtAuthenticationEntryPoint;//import com.gleasondev.epiqbooksbackend.security.JwtAuthenticationFilter;//import com.gleasondev.epiqbooksbackend.service.CustomUserDetailsService;//import org.springframework.beans.factory.annotation.Autowired;//import org.springframework.context.annotation.Bean;//import org.springframework.context.annotation.Configuration;//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;//import org.springframework.security.config.annotation.web.builders.HttpSecurity;//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;//import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer;//import org.springframework.security.config.http.SessionCreationPolicy;//import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;//import org.springframework.security.crypto.password.PasswordEncoder;//import org.springframework.security.web.SecurityFilterChain;//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;//import org.springframework.web.cors.CorsConfiguration;//import org.springframework.web.cors.CorsConfigurationSource;//import org.springframework.web.cors.UrlBasedCorsConfigurationSource;////import java.util.Arrays;////@Configuration//@EnableWebSecurity//public class WebSecurityConfig {////    @Autowired//    private CustomUserDetailsService customUserDetailsService;////    @Autowired//    private JwtAuthenticationEntryPoint unauthorizedHandler;////    @Bean//    public JwtAuthenticationFilter jwtAuthenticationFilter() {//        return new JwtAuthenticationFilter();//    }////    @Autowired(required = false)//    public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {//        authenticationManagerBuilder//                .userDetailsService(customUserDetailsService)//                .passwordEncoder(passwordEncoder());//    }////    @Bean//    public PasswordEncoder passwordEncoder() {//        return new BCryptPasswordEncoder();//    }////    @Bean//    public CorsConfigurationSource corsConfigurationSource() {//        CorsConfiguration configuration = new CorsConfiguration();//        configuration.setAllowedOrigins(Arrays.asList("*"));//        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));//        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));//        configuration.setExposedHeaders(Arrays.asList("Authorization", "Content-Type"));//        configuration.setAllowCredentials(true);//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();//        source.registerCorsConfiguration("/**", configuration);//        return source;//    }////    @Bean//    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {//        ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry authorizeRequests = http//                .cors()//                .and()//                .csrf()//                .disable()//                .exceptionHandling()//                .authenticationEntryPoint(unauthorizedHandler)//                .and()//                .sessionManagement()//                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)//                .and()//                .authorizeRequests()//                .antMatchers("/api/auth/**")//                .permitAll()//                .anyRequest()//                .authenticated();////        // Add JWT authentication filter//        http.addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);////        return http.build();//    }//}import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecuritypublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {    private final UserDetailsService userDetailsService;    private final PasswordEncoder passwordEncoder;    @Autowired    public WebSecurityConfig(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {        this.userDetailsService = userDetailsService;        this.passwordEncoder = passwordEncoder;    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    protected void configure(HttpSecurity http) throws Exception {        http                .csrf().disable()                .authorizeRequests()                .antMatchers("/public/**").permitAll()                .anyRequest().authenticated()                .and()                .formLogin()                .loginPage("/login")                .permitAll()                .and()                .logout()                .permitAll();    }    @Autowired    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {        auth                .userDetailsService(userDetailsService)                .passwordEncoder(passwordEncoder);    }}