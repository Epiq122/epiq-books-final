package com.gleasondev.epiqbooksbackend.service;import com.gleasondev.epiqbooksbackend.entity.Book;import com.gleasondev.epiqbooksbackend.repository.BookRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;@Servicepublic class BookService {    private final BookRepository bookRepository;    @Autowired    public BookService(BookRepository bookRepository) {        this.bookRepository = bookRepository;    }    public Page<Book> getAllBooks(Pageable pageable) {        return bookRepository.findAll(pageable);    }    public Book getBookById(Long id) {        return bookRepository.findById(id)                             .orElseThrow(() -> new RuntimeException("Book not found with id: " + id));    }    public Book saveBook(Book book) {        return bookRepository.save(book);    }    public Book updateBook(Long id, Book updatedBook) {        return bookRepository.findById(id)                             .map(book -> {                                 book.setTitle(updatedBook.getTitle());                                 book.setAuthor(updatedBook.getAuthor());                                 book.setDescription(updatedBook.getDescription());                                                                 return bookRepository.save(book);                             })                             .orElseThrow(() -> new RuntimeException("Book not found with id: " + id));    }    public void deleteBook(Long id) {        bookRepository.deleteById(id);    }    public Page<Book> searchBooks(String title, String category, Pageable pageable) {        if (title != null && !title.isEmpty()) {            return bookRepository.findByTitleContaining(title, pageable);        } else if (category != null && !category.isEmpty()) {            return bookRepository.findByCategory(category, pageable);        } else {            return bookRepository.findAll(pageable);        }    }}