package com.gleasondev.epiqbooksbackend.service;import com.gleasondev.epiqbooksbackend.entity.Book;import com.gleasondev.epiqbooksbackend.entity.Checkout;import com.gleasondev.epiqbooksbackend.repository.BookRepository;import com.gleasondev.epiqbooksbackend.repository.CheckoutRepository;import com.gleasondev.epiqbooksbackend.repository.ReviewRepository;import com.gleasondev.epiqbooksbackend.responsemodels.AddBookRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.ResponseStatus;import javax.transaction.Transactional;import java.util.Optional;@Service@Transactionalpublic class AdminService {    private BookRepository bookRepository;    private ReviewRepository reviewRepository;    private CheckoutRepository checkoutRepository;    @Autowired    public AdminService(BookRepository bookRepository, ReviewRepository reviewRepository, CheckoutRepository checkoutRepository) {        this.bookRepository = bookRepository;        this.reviewRepository = reviewRepository;        this.checkoutRepository = checkoutRepository;    }    public void postBook(AddBookRequest addBookRequest) {        Book book = new Book();        book.setTitle(addBookRequest.getTitle());        book.setAuthor(addBookRequest.getAuthor());        book.setDescription(addBookRequest.getDescription());        book.setCopies(addBookRequest.getCopies());        book.setCopiesAvailable(addBookRequest.getCopies());        book.setCategory(addBookRequest.getCategory());        book.setImg(addBookRequest.getImg());        bookRepository.save(book);    }    public void increaseBookQuantity(Long bookId) throws Exception {        Optional<Book> book = bookRepository.findById(bookId);        if (book.isEmpty()) {            throw new Exception("Book not found");        }        book.get().setCopiesAvailable(book.get().getCopiesAvailable() + 1);        book.get().setCopies(book.get().getCopies() + 1);        bookRepository.save(book.get());    }    public void decreaseBookQuantity(Long bookId) throws Exception {        Optional<Book> book = bookRepository.findById(bookId);        if (book.isEmpty() || book.get().getCopiesAvailable() <= 0 || book.get().getCopies() <= 0) {            throw new Exception("Book not found or no copies available");        }        book.get().setCopiesAvailable(book.get().getCopiesAvailable() - 1);        book.get().setCopies(book.get().getCopies() - 1);        bookRepository.save(book.get());    }    // this is for deleting a book from the database.    public void deleteBook(Long bookId) throws Exception {        Optional<Book> book = bookRepository.findById(bookId);        if (book.isEmpty()) {            throw new Exception("Book not found");        }        bookRepository.delete(book.get());        checkoutRepository.deleteAllByBookId(bookId);        reviewRepository.deleteAllByBookId(bookId);    }    public Checkout findCheckout(String userEmail, Long bookId) {        Book book = bookRepository.findById(bookId).orElseThrow(() -> new BookNotFoundException(bookId));        return (Checkout) checkoutRepository.findBooksByUserEmailAndBook(userEmail, book);    }    public void updateBook(Long bookId, AddBookRequest addBookRequest) throws Exception {        Optional<Book> optionalBook = bookRepository.findById(bookId);        if (optionalBook.isEmpty()) {            throw new Exception("Book not found");        }        Book book = optionalBook.get();        book.setTitle(addBookRequest.getTitle());        book.setAuthor(addBookRequest.getAuthor());        book.setDescription(addBookRequest.getDescription());        book.setCopies(addBookRequest.getCopies());        book.setCopiesAvailable(addBookRequest.getCopiesAvailable());        book.setCategory(addBookRequest.getCategory());        book.setImg(addBookRequest.getImg());        bookRepository.save(book);    }    @ResponseStatus(HttpStatus.NOT_FOUND)    public static class BookNotFoundException extends RuntimeException {        public BookNotFoundException(Long id) {            super("Book not found with id: " + id);        }    }}