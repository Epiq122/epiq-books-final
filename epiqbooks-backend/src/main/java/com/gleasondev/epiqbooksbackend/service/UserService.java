package com.gleasondev.epiqbooksbackend.service;import com.gleasondev.epiqbooksbackend.entity.User;import com.gleasondev.epiqbooksbackend.repository.UserRepository;import com.gleasondev.epiqbooksbackend.requestmodels.UserDto;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Optional;@Servicepublic class UserService implements UserDetailsService {    private final UserRepository userRepository;    public UserService(UserRepository userRepository) {        this.userRepository = userRepository;    }    @Override    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {        Optional<User> user = userRepository.findByUsername(userName);        if (!user.isPresent()) {            throw new UsernameNotFoundException("User not found");        }        return new org.springframework.security.core.userdetails.User(user.get().getUsername(),                user.get().getPassword(),                new ArrayList<>());    }    public Optional<User> findByUsername(String username) {        return userRepository.findByUsername(username);    }    public User save(UserDto user) {        User newUser = new User();        newUser.setUsername(user.getUsername());        newUser.setPassword(new BCryptPasswordEncoder().encode(user.getPassword()));        newUser.setRole(user.getRole());        System.out.println("Saved new user with username: " + newUser.getUsername());        return userRepository.save(newUser);    }}