package com.gleasondev.epiqbooksbackend.service;import com.gleasondev.epiqbooksbackend.entity.User;import com.gleasondev.epiqbooksbackend.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;import java.util.Optional;@Servicepublic class UserService {    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder;    public User createUser(User user) {        user.setPassword(passwordEncoder.encode(user.getPassword()));        user.setCreatedDate(LocalDate.now());        return userRepository.save(user);    }    public Optional<User> findUserById(Long id) {        return userRepository.findById(id);    }    public Optional<User> findUserByEmail(String email) {        return userRepository.findByEmail(email);    }    public List<User> findAllUsers() {        return userRepository.findAll();    }    public User updateUser(Long id, User updatedUser) {        Optional<User> optionalUser = userRepository.findById(id);        if (optionalUser.isPresent()) {            User user = optionalUser.get();            user.setEmail(updatedUser.getEmail());            user.setFirstName(updatedUser.getFirstName());            user.setLastName(updatedUser.getLastName());            user.setPassword(passwordEncoder.encode(updatedUser.getPassword()));            user.setUsername(updatedUser.getUsername());            user.setRole(updatedUser.getRole());            return userRepository.save(user);        }        return null;    }    public void deleteUser(Long id) {        userRepository.deleteById(id);    }}