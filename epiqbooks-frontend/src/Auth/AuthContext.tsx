import React, {createContext, PropsWithChildren, useContext, useState} from 'react';export interface AuthContextValue {    isAuthenticated: boolean;    login: (email: string, password: string) => void;    logout: () => void;    user: {        userType?: string;        role?: string;    } | null;    getAccessToken: () => string | null;}const AuthContext = createContext<AuthContextValue>({    isAuthenticated: false,    login: () => {    },    logout: () => {    },    user: null,    getAccessToken: () => null,})export const useAuth = () => {    return useContext(AuthContext)}export const AuthProvider: React.FC<PropsWithChildren<{}>> = ({children}) => {    const [isAuthenticated, setIsAuthenticated] = useState(false)    const login = async (email: string, password: string) => {        try {            const response = await fetch('<API_BASE_URL>/<AUTHENTICATION_ENDPOINT>', {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                },                body: JSON.stringify({email, password}),            });            if (response.ok) {                const data = await response.json();                // Assuming your API returns a token and userType (admin or normal user) in the response                const {token, userType} = data;                // Store the token and user information in the state or local storage                setIsAuthenticated(true);                setUser({userType});                // You might want to store the token in local storage or use it for future API requests                localStorage.setItem('token', token);            } else {                // Handle errors based on your API implementation                console.error('Authentication failed');            }        } catch (error) {            console.error('Error during authentication:', error);        }    };    const logout = () => {        // Call your backend API to log out the user        // If successful, set isAuthenticated to false    };    const getAccessToken = () => {        return localStorage.getItem('token');    };    const [user, setUser] = useState<{ userType?: string; role?: string } | null>(null);    const value = {isAuthenticated, login, logout, user, getAccessToken};    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;};