import React, {createContext, PropsWithChildren, useContext, useState} from "react";interface AuthContextValue {    isAuthenticated: boolean;    login: (email: string, password: string) => void    logout: () => void}const AuthContext = createContext<AuthContextValue>({    isAuthenticated: false,    login: () => {    },    logout: () => {    }})export const useAuth = () => {    return useContext(AuthContext)}export const AuthProvider: React.FC<PropsWithChildren<{}>> = ({children}) => {    const [isAuthenticated, setIsAuthenticated] = useState(false)    const login = (email: string, password: string) => {        // Call your backend API to authenticate the user with email and password        // If successful, set isAuthenticated to true    };    const logout = () => {        // Call your backend API to log out the user        // If successful, set isAuthenticated to false    };    const value = {isAuthenticated, login, logout};    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;};